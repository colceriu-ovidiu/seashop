<?phpnamespace CO\ArticlesBundle\Entity;use Doctrine\ORM\Mapping as ORM;use Doctrine\Common\Collections\ArrayCollection;/** * @ORM\Entity(repositoryClass="CO\ArticlesBundle\Repository\ArticleRepository") * @ORM\Table(name="articles") * @ORM\HasLifecycleCallbacks() */class Article{	/**     * @ORM\Id     * @ORM\Column(type="integer")     * @ORM\GeneratedValue(strategy="AUTO")     */    protected $id;		/**     * @ORM\Column(type="string")     */	protected $title;		/**     * @ORM\Column(type="string", length=100)     */	protected $author;		/**     * @ORM\Column(type="text")     */	protected $blog;		/**     * @ORM\Column(type="string", length=20, nullable=true)     */	protected $image;		/**     * @ORM\Column(type="text")     */    protected $tags;	    /**     * @ORM\OneToMany(targetEntity="Comment", mappedBy="article")     */    protected $comments  = array();    	/**     * @ORM\Column(type="datetime")     */    protected $created;		/**     * @ORM\Column(type="datetime")     */    protected $updated;	    /**     * @ORM\Column(type="string")     */    protected $slug;	    //---------------------------------------        public function __construct()    {		$this->comments = new ArrayCollection();        $this->setCreated(new \DateTime());        $this->setUpdated(new \DateTime());    }        /**     * @ORM\PreUpdate     */    public function setUpdatedValue()    {       $this->setUpdated(new \DateTime());    }    	public function __toString()	{		return $this->getTitle();	}			public function slugify($text)	{		// replace non letter or digits by -		$text = preg_replace('#[^\\pL\d]+#u', '-', $text);		// trim		$text = trim($text, '-');		// transliterate		if (function_exists('iconv'))		{			$text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);		}		// lowercase		$text = strtolower($text);		// remove unwanted characters		$text = preg_replace('#[^-\w]+#', '', $text);		if (empty($text))		{			return 'n-a';		}		return $text;	}		//-=======-		/**     * Get id     *     * @return integer      */    public function getId()    {        return $this->id;    }    /**     * Set title     *     * @param string $title     * @return Article     */    public function setTitle($title)    {        $this->title = $title;				$this->setSlug($this->title);            return $this;    }    /**     * Get title     *     * @return string      */    public function getTitle()    {        return $this->title;    }    /**     * Set author     *     * @param string $author     * @return Article     */    public function setAuthor($author)    {        $this->author = $author;            return $this;    }    /**     * Get author     *     * @return string      */    public function getAuthor()    {        return $this->author;    }    /**     * Set blog     *     * @param string $blog     * @return Article     */    public function setBlog($blog)    {        $this->blog = $blog;            return $this;    }    /**     * Get blog     *     * @return string      */    public function getBlog($length=null)    {        if (false === is_null($length) && $length > 0)            return substr($this->blog, 0, $length)."...";        else            return $this->blog;            }    /**     * Set image     *     * @param string $image     * @return Article     */    public function setImage($image)    {        $this->image = $image;            return $this;    }    /**     * Get image     *     * @return string      */    public function getImage()    {        return $this->image;    }    /**     * Set tags     *     * @param string $tags     * @return Article     */    public function setTags($tags)    {        $this->tags = $tags;            return $this;    }    /**     * Get tags     *     * @return string      */    public function getTags()    {        return $this->tags;    }    /**     * Set created     *     * @param \DateTime $created     * @return Article     */    public function setCreated($created)    {        $this->created = $created;            return $this;    }    /**     * Get created     *     * @return \DateTime      */    public function getCreated()    {        return $this->created;    }    /**     * Set updated     *     * @param \DateTime $updated     * @return Article     */    public function setUpdated($updated)    {        $this->updated = $updated;            return $this;    }    /**     * Get updated     *     * @return \DateTime      */    public function getUpdated()    {        return $this->updated;    }        /**     * Add comments     *     * @param CO\ArticlesBundle\Entity\Comment $comments     * @return Article     */    public function addComment(\CO\ArticlesBundle\Entity\Comment $comments)    {        $this->comments[] = $comments;            return $this;    }    /**     * Remove comments     *     * @param CO\ArticlesBundle\Entity\Comment $comments     */    public function removeComment(\CO\ArticlesBundle\Entity\Comment $comments)    {        $this->comments->removeElement($comments);    }    /**     * Get comments     *     * @return Doctrine\Common\Collections\Collection      */    public function getComments()    {        return $this->comments;    }    /**     * Set slug     *     * @param string $slug     * @return Article     */    public function setSlug($slug)    {		$this->slug = $this->slugify($slug);            return $this;    }    /**     * Get slug     *     * @return string      */    public function getSlug()    {        return $this->slug;    }}